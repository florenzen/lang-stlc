base language definition FJ 

lexical syntax
  [\ \t\r\n] -> LAYOUT

  "//" ~[\n\r]* ([\n\r] | EOF) -> LAYOUT
                               -> EOF

context-free restrictions
  LAYOUT? -/- [\ \t\r\n]
  LAYOUT? -/- [\/] . [\/]

lexical restrictions
  EOF -/- ~[]

// Identifiers
lexical syntax
  [a-zA-Z0-9]*       -> ALPHANUMS
  [a-zA-Z] ALPHANUMS -> ID {sx-atoms}

lexical restrictions
  ID -/- [a-zA-Z0-9]

// Keywords
lexical syntax
  "class"     -> Keyword
  "public"    -> Keyword
  "private"   -> Keyword
  "extends"   -> Keyword
  "void"      -> Keyword
  "super"     -> Keyword
  "return"    -> Keyword
  "null"      -> Keyword
  "new"       -> Keyword
  "extension" -> Keyword
  "this"      -> Keyword
  "true"      -> Keyword
  "false"     -> Keyword
  Keyword     -> ID {reject}

// Types
lexical syntax
  "int"         -> PrimitiveType
  "boolean"     -> PrimitiveType
  PrimitiveType -> ID {reject}

context-free syntax
  PrimitiveType -> Type
  GenClass      -> Type
  ID            -> Type
  
  ID "<" Types1 ">" -> GenClass
  
  Type            -> Types1
  Type "," Types1 -> Types1

  ID               -> TypeVars1
  ID "," TypeVars1 -> TypeVars1

// Classes
context-free syntax
  "public" "class" c:ID ClassBody                                        -> Class {sx-body-dec, sx-namespace-suffix(c)}
  "public" "class" c:ID "extends" SuperClass ClassBody                   -> Class {sx-body-dec, sx-namespace-suffix(c)}
  "public" "class" c:ID "<" TypeVars1 ">" ClassBody                      -> Class {sx-body-dec, sx-namespace-suffix(c)}
  "public" "class" c:ID "<" TypeVars1 ">" "extends" SuperClass ClassBody -> Class {sx-body-dec, sx-namespace-suffix(c)}

  GenClass -> SuperClass
  ID       -> SuperClass

  "{" Fields Constructor Methods "}" -> ClassBody
  "{" Fields Methods "}"             -> ClassBody

// Fields
context-free syntax
  "private" Type ID ";" -> Field
  
               -> Fields
  Field Fields -> Fields

// Constructors
context-free syntax
  "public" ID "(" Parameters ")" ConstructorBody -> Constructor
  
  "{" "super" "(" Exprs ")" ";" Assignments "}" -> ConstructorBody
  "{" Assignments "}"                           -> ConstructorBody

// Methods
  "public" Type ID "(" Parameters ")" MethodBody   -> Method
  "public" "void" ID "(" Parameters ")" MethodBody -> Method
  
  "{" Statements "}" -> MethodBody

                 -> Methods
  Method Methods -> Methods
  
// Parameters
context-free syntax
  Type ID -> Parameter
  
                               -> Parameters
  Parameter ParametersTail     -> Parameters
                               -> ParametersTail
  "," Parameter ParametersTail -> ParametersTail

// Statements
context-free syntax
  VarDecl                                      -> Statement
  Assignment                                   -> Statement
  MethodCall ";"                               -> Statement
  "while" "(" Expr ")" Statement               -> Statement
  "if" "(" Expr ")" Statement                  -> Statement
  "if" "(" Expr ")" Statement "else" Statement -> Statement
  "{" Statements "}"                           -> Statement
  "return" Expr ";"                            -> Statement

                       -> Statements
  Statement Statements -> Statements

// Assignments and variable declarations
context-free syntax
  VarRef "=" Expr ";" -> Assignment
  
                         -> Assignments
  Assignment Assignments -> Assignments

  Type ID "=" Expr ";" -> VarDecl
  Type ID ";"          -> VarDecl

// Method calls
context-free syntax
  Expr "." ID "(" Exprs ")" -> MethodCall
  ID "(" Exprs ")" -> MethodCall

lexical syntax
  [0-9][0-9]* -> DIGITS
  "-" DIGITS  -> INT
  "+" DIGITS  -> INT
  DIGITS      -> INT

context-free syntax
  ID            -> VarRef
  "this" "." ID -> VarRef

  INT                                   -> Expr
  "null"                                -> Expr
  "true"                                -> Expr
  "false"                               -> Expr
  VarRef                                -> Expr
  "this"                                -> Expr
  MethodCall                            -> Expr
  "new" ID "(" Exprs ")"                -> Expr
  "new" ID "<" Types1 ">" "(" Exprs ")" -> Expr
  Expr ARITHOP1 Expr                    -> Expr {left}
  Expr ARITHOP2 Expr                    -> Expr {left}
  Expr LOGOP1 Expr                      -> Expr {left}
  Expr LOGOP2 Expr                      -> Expr {left}
  "!" Expr                              -> Expr
  Expr CMPOP Expr                       -> Expr {non-assoc}
  Expr EQOP Expr                        -> Expr {non-assoc}
  "(" Expr ")"                          -> Expr {bracket}

                     -> Exprs
  Expr ExprsTail     -> Exprs
                     -> ExprsTail
  "," Expr ExprsTail -> ExprsTail

  "*" -> ARITHOP1
  "/" -> ARITHOP1
  "+" -> ARITHOP2
  "-" -> ARITHOP2

  "&&" -> LOGOP1
  "||" -> LOGOP2

  "<"  -> CMPOP
  "<=" -> CMPOP
  ">=" -> CMPOP
  ">"  -> CMPOP

  "==" -> EQOP
  "!=" -> EQOP

context-free priorities
  { "!" Expr           -> Expr } >
  { Expr ARITHOP1 Expr -> Expr } >
  { Expr ARITHOP2 Expr -> Expr } >
  { Expr CMPOP Expr    -> Expr } >
  { Expr EQOP Expr     -> Expr } >
  { Expr LOGOP1 Expr   -> Expr } >
  { Expr LOGOP2 Expr   -> Expr }

// Package declarations
lexical syntax
  { ID "." }+ -> PID {sx-namespace-prefixed(".")}

context-free syntax
  "package" pkg:PID ";" -> Package {sx-namespace-dec(pkg)}

// Import declarations
lexical syntax
  PID "." ID -> QID {sx-atoms, sx-module-identifier}

context-free syntax
  "import" q:QID ";" -> Import {sx-import-dec(q)}

// Toplevel structure
toplevel declaration ToplevelDec
toplevel declarations ToplevelDecs

// Meta-variables
lexical syntax 
  "x" ALPHANUMS        -> MVVar
  "y" ALPHANUMS        -> MVVar
  "T" ALPHANUMS        -> MVType
  "X" ALPHANUMS        -> MVTypeVar
  "Y" ALPHANUMS        -> MVTypeVar
  "T" ALPHANUMS "+"    -> MVTypes1
  "X" ALPHANUMS "+"    -> MVTypeVars1
  "n" ALPHANUMS        -> MVINT
  "c" ALPHANUMS        -> MVClassName
  "k" ALPHANUMS        -> MVConstructorName
  "m" ALPHANUMS        -> MVMethodName
  "pkg" ALPHANUMS      -> MVPID
  "q" ALPHANUMS        -> MVQID
  "~q" ALPHANUMS       -> MVQID
  "cbody" ALPHANUMS    -> MVClassBody
  "con" ALPHANUMS      -> MVConstructor
  "conbody" ALPHANUMS  -> MVConstructorBody
  "asgn" ALPHANUMS     -> MVAssignment
  MVAssignment "*"     -> MVAssignments
  "fld" ALPHANUMS "*"  -> MVFields
  "meth" ALPHANUMS "*" -> MVMethods
  "mbody" ALPHANUMS    -> MVMethodBody
  "p" ALPHANUMS "*"    -> MVParameters
  "p" ALPHANUMS "'"    -> MVParametersTail
  "sc" ALPHANUMS       -> MVSuperClass
  "stm" ALPHANUMS      -> MVStatement
  MVStatement "*"      -> MVStatements
  "e" ALPHANUMS        -> MVExpr
  MVExpr "*"           -> MVExprs
  MVExpr "'"           -> MVExprsTail
  "tld" ALPHANUMS "*"  -> MVToplevelDecs
  "aop1" ALPHANUMS     -> MVARITHOP1
  "aop2" ALPHANUMS     -> MVARITHOP2
  "lop1" ALPHANUMS     -> MVLOGOP1
  "lop2" ALPHANUMS     -> MVLOGOP2
  "cop" ALPHANUMS      -> MVCMPOP
  "eop" ALPHANUMS      -> MVEQOP

  Keyword -> MVINT {reject}

lexical restrictions
  MVVar
  MVType
  MVTypeVar
  MVINT
  MVClassName
  MVConstructorName
  MVMethodName
  MVPID
  MVQID
  MVClassBody
  MVConstructor
  MVConstructorBody
  MVAssignment
  MVMethodBody
  MVSuperClass
  MVStatement
  MVExpr
  MVARITHOP1
  MVARITHOP2
  MVLOGOP1
  MVLOGOP2
  MVCMPOP
  MVEQOP
    -/- [a-zA-Z0-9]

variables
  MVVar             -> ID              {prefer}
  MVType            -> Type            {prefer}
  MVTypeVar         -> ID              {prefer}
  MVTypes1          -> Types1          {prefer}
  MVTypeVars1       -> TypeVars1       {prefer}
  MVINT             -> INT             {prefer}
  MVClassName       -> ID              {prefer}
  MVConstructorName -> ID              {prefer}
  MVMethodName      -> ID              {prefer}
  MVPID             -> PID             {prefer}
  MVQID             -> QID             {prefer}
  MVClassBody       -> ClassBody       {prefer}
  MVConstructor     -> Constructor     {prefer}  
  MVConstructorBody -> ConstructorBody {prefer}
  MVAssignment      -> Assignment      {prefer}
  MVAssignments     -> Assignments     {prefer}
  MVFields          -> Fields          {prefer}
  MVMethods         -> Methods         {prefer}
  MVMethodBody      -> MethodBody      {prefer}
  MVParameters      -> Parameters      {prefer}
  MVParametersTail  -> ParametersTail  {prefer}
  MVSuperClass      -> SuperClass      {prefer}
  MVStatement       -> Statement       {prefer}
  MVStatements      -> Statements      {prefer}
  MVExpr            -> Expr            {prefer}
  MVExprs           -> Exprs           {prefer}
  MVExprsTail       -> ExprsTail       {prefer}
  MVToplevelDecs    -> ToplevelDecs    {prefer}
  MVARITHOP1        -> ARITHOP1        {prefer}
  MVARITHOP2        -> ARITHOP2        {prefer}
  MVLOGOP1          -> LOGOP1          {prefer}
  MVLOGOP2          -> LOGOP2          {prefer}
  MVCMPOP           -> CMPOP           {prefer}
  MVEQOP            -> EQOP            {prefer}
  
// Syntax internal to the type system
context-free syntax
  // Expression types
  PrimitiveType -> AType
  QID ATypes    -> AType
  ID            -> AType
  "Object"      -> AType

  "[]"              -> ATypes
  AType "::" ATypes -> ATypes

  "[]"             -> TypeVars
  ID "::" TypeVars -> TypeVars

  // Method types and signatures
  "void" -> RetType
  AType  -> RetType

  ATypes "->" RetType -> MethType

  ID ":" MethType -> MethSig
  
  "[]"                  -> MethSigs
  MethSig "::" MethSigs -> MethSigs

  // Class types
  "{" ATypes "," MethSigs "," AType "," TypeVars "}" -> ClassType
  "{}"                                               -> ClassType

  // Imports and class table
  "[]"                      -> Imports
  ID "|->" QID "::" Imports -> Imports

  Imports                                -> ClassTable
  Imports "," ID "|->" QID ":" ClassType -> ClassTable

  // Method lookup result
  "undef"  -> MlookupRes
  MethType -> MlookupRes

  // Environment
  "(/)"                -> Env
  Env "," ID ":" AType -> Env

  // Module interface
  ClassType -> ModuleInterface

lexical syntax
  "Object" -> ID {reject}

// Meta-variables
lexical syntax
  "t" ALPHANUMS       -> MVAType
  "s" ALPHANUMS       -> MVAType
  MVAType "*"         -> MVATypes
  MVTypeVar "*"       -> MVTypeVars
  "rt" ALPHANUMS      -> MVRetType
  "mt" ALPHANUMS      -> MVMethType
  "msig" ALPHANUMS    -> MVMethSig
  MVMethSig "*"       -> MVMethSigs
  "ct" ALPHANUMS      -> MVClassType
  "I" ALPHANUMS "*"   -> MVImports
  "CT" ALPHANUMS      -> MVClassTable
  "M" ALPHANUMS       -> MVModuleInterface
  "mlres" ALPHANUMS   -> MVMlookupRes
  "E" ALPHANUMS        -> MVEnv

lexical restrictions
  MVAType
  MVRetType
  MVMethType
  MVMethSig
  MVClassType
  MVType
  MVClassTable
  MVModuleInterface
  MVMlookupRes
  MVEnv
    -/- [a-zA-Z0-9]

variables
  MVAType           -> AType           {prefer}
  MVTypeVar         -> ID              {prefer}
  MVATypes          -> ATypes          {prefer}
  MVTypeVars        -> TypeVars        {prefer}
  MVRetType         -> RetType         {prefer}
  MVMethType        -> MethType        {prefer}
  MVMethSig         -> MethSig         {prefer}
  MVMethSigs        -> MethSigs        {prefer}
  MVClassType       -> ClassType       {prefer}
  MVImports         -> Imports         {prefer}
  MVClassTable      -> ClassTable      {prefer}
  MVModuleInterface -> ModuleInterface {prefer}
  MVMlookupRes      -> MlookupRes      {prefer}
  MVEnv             -> Env             {prefer}

// Module system declarations
interface ModuleInterface

judgement forms
  // { "suffix" "(" QID ")" "=" ID } // TODO must be provided by SoundX
  // { "concat" "(" PID "," ID ")" "=" QID } // TODO must be provided by SoundX
  { ClassTable "|-" ToplevelDecs "=>" ModuleInterface }
  { ClassTable "|" PID "|-" ToplevelDecs "=>" ModuleInterface }
  { ClassTable "+" ID "|->" QID "=" ClassTable }
  { ClassTable "+" ID "|->" QID ":" ClassType "=" ClassTable }
  { ID "notin" "dom" "(" ClassTable ")" }
  { "disjoint" "(" TypeVars1 ")" "=" TypeVars }
  { ID "in" TypeVars }
  { ID "notin" TypeVars }
  { "|" TypeVars "|" "=" "|" ATypes "|" }
  { ClassTable "(" ID ")" "=" ClassType }
  { ClassTable "." QID  "=" ClassType }
  { "qualify" "(" ClassTable "," ID ")" "=" QID }
  { "msigs" "(" ClassTable "," TypeVars "," AType "," ClassBody ")" "=" MethSigs }
  { "msigs" "(" ClassTable "," TypeVars "," AType "," Methods ")" "=" MethSigs }
  { "mtype" "(" ID "," MethSigs ")" "=" MlookupRes }
  { "mlookup" "(" ClassTable "," AType "," ID ")" "=" MlookupRes }
  { "conparams" "(" ClassTable "," ID "," TypeVars "," ClassBody ")" "=" ATypes }
  { "normSuperClass" "(" ClassTable "," TypeVars "," SuperClass ")" "=" AType }
  { "normPrimParams" "(" ClassTable "," TypeVars "," Parameters ")" "=" ATypes }
  { "normPrimParamsTail" "(" ClassTable "," TypeVars "," ParametersTail ")" "=" ATypes }
  { "normPrim" "(" ClassTable "," TypeVars "," Type ")" "=" AType }
  { "normListPrim" "(" ClassTable "," TypeVars "," Types1 ")" "=" ATypes } // TODO req?
  { "norm" "(" ClassTable "," TypeVars "," Type ")" "=" AType }
  { "normList" "(" ClassTable "," TypeVars "," Types1 ")" "=" ATypes }
  { "mt" "[" TypeVars "|->" ATypes "]" "(" MethType ")" "=" MethType }
  { "[" TypeVars "|->" ATypes "]" "(" AType ")" "=" AType }
  { "[" TypeVars "|->" ATypes "]" "(" ATypes ")" "=" ATypes }
  { "replace" "(" TypeVars "," ATypes "," ID ")" "=" AType }
  { ClassTable "|-" ClassBody "OK" }
  { ClassTable ";" Env "|-" Constructor "OK" }
  { ClassTable ";" Env ";" Env "|-" ConstructorBody "OK" }
  { ClassTable ";" Env ";" Env "|-" Assignments "OK" }
  { "fieldenv" "(" ClassTable "," Fields ")" "=" Env }
  { ClassTable ";" Env "|-" Methods "OK" }
  { "typevars" "(" ClassTable ")" "=" TypeVars }
  { "class" "(" ClassTable ")" "=" AType }
  { ID "notin" "dom" "(" Env ")" }
  { "localenv" "(" ClassTable "," Parameters ")" "=" Env }
  { "localenvTail" "(" ClassTable "," ParametersTail ")" "=" Env }
  { ClassTable ";" Env ";" Env "|-" Statements "~" RetType }
  { ClassTable ";" Env ";" Env "|-" Expr ":" AType }
  { ClassTable ";" Env ";" Env "|-" Exprs ":" ATypes }
  { "atypesTail" "(" ClassTable "," Env "," Env "," ExprsTail ")" "=" ATypes }
  { ClassTable "|-" AType "<:" AType }
  { ClassTable "|-" ATypes "<:" ATypes }
  { ID ":" AType "in" Env ";" Env }
  { ID ":" AType "in" Env }
  { "typevarsAsTypes" "(" TypeVars ")" "=" ATypes }

inductive definitions
  // Toplevel declarations (TL: toplevel)
  TL-Package:
    CT | pkg |- tld* => M
    ----------------------------
    CT |- package pkg; tld* => M

  // Toplevel declarations with package name (TLP: toplevel package)
  TLP-Import:
    suffix(q) = c
    CT + c |-> q = CT1
    CT1 | pkg |- tld* => M
    -------------------------------
    CT | pkg |- import q; tld* => M

  TLP-ClassMonObj:
    c notin dom(CT)
    concat(pkg, c) = q
    CT + c|->q:{[], [], Object, []} = CT0
    msigs(CT0, [], Object, cbody) = msig*
    conparams(CT0, c, [], cbody) = t*
    CT + c |-> q : {t*, msig*, Object, []} = CT1
    CT1 |- cbody OK
    -----------------------------------------------------------
    CT | pkg |- public class c cbody => {t*, msig*, Object, []}

  TLP-ClassMonSup:
    c notin dom(CT)
    normSuperClass(CT, [], sc) = t
    concat(pkg, c) = q
    CT + c|->q:{[], [], t, []} = CT0
    msigs(CT0, [], t, cbody) = msig*
    conparams(CT0, c, [], cbody) = t*
    CT + c |-> q : {t*, msig*, t, []} = CT1
    CT1 |- cbody OK
    -----------------------------------------------------------------
    CT | pkg |- public class c extends sc cbody => {t*, msig*, t, []}

  TLP-ClassGenObj:
    c notin dom(CT)
    disjoint(X+) = X*
    concat(pkg, c) = q
    CT + c|->q:{[], [], Object, X*} = CT0
    msigs(CT0, X*, Object, cbody) = msig*
    conparams(CT0, c, X*, cbody) = t*
    CT + c |-> q : {t*, msig*, Object, X*} = CT1
    CT1 |- cbody OK
    ---------------------------------------------------------------
    CT | pkg |- public class c<X+> cbody => {t*, msig*, Object, X*}

  TLP-ClassGenSup:
    c notin dom(CT)
    disjoint(X+) = X*
    concat(pkg, c) = q
    normSuperClass(CT, X*, sc) = t
    CT + c|->q:{[], [], t, X*} = CT0
    msigs(CT0, X*, t, cbody) = msig*
    conparams(CT0, c, X*, cbody) = t*
    CT + c |-> q : {t*, msig*, t, X*} = CT1
    CT1 |- cbody OK
    ---------------------------------------------------------------------
    CT | pkg |- public class c<X+> extends sc cbody => {t*, msig*, t, X*}

  TLP-Empty:
    -----------------
    CT | pkg |- => {}

  // Constructor parameters (CP: constructor parameters)
  CP-Implicit:
     -----------------------------------------
     conparams(CT, c, X*, { fld* meth* }) = []

  CP-Explicit:
     normPrimParams(CT, X*, p*) = t*
     --------------------------------------------------------------
     conparams(CT, c, X*, { fld* public c(p*) conbody meth* }) = t*

  // Method signatures (MS: method signatures)
  MS-ConImplicit:
    msigs(CT, X*, t, meth*) = msig*
    ----------------------------------------
    msigs(CT, X*, t, { fld* meth* }) = msig*

  MS-ConExplicit:
    msigs(CT, X*, t, meth*) = msig*
    --------------------------------------------
    msigs(CT, X*, t, { fld* con meth* }) = msig*

  MS-Empty:
    -----------------------
    msigs(CT, X*, t, ) = []

  MS-Override:
    mlookup(CT, t, m) = s*->s
    msigs(CT, X*, t, meth*) = msig*
    mtype(m, msig*) = undef
    normPrim(CT, X*, T) = s
    normPrimParams(CT, X*, p*) = s*
    ---------------------------------------------------------------
    msigs(CT, X*, t, public T m(p*) mbody meth*) = m:s*->s :: msig*

  MS-NoOverride:
    mlookup(CT, t, m) = undef
    msigs(CT, X*, t, meth*) = msig*
    mtype(m, msig*) = undef
    normPrim(CT, X*, T) = s
    normPrimParams(CT, X*, p*) = s*
    ---------------------------------------------------------------
    msigs(CT, X*, t, public T m(p*) mbody meth*) = m:s*->s :: msig*

  MS-OverrideVoid:
    mlookup(CT, t, m) = s*->void
    msigs(CT, X*, t, meth*) = msig*
    mtype(m, msig*) = undef
    normPrimParams(CT, X*, p*) = s*
    ---------------------------------------------------------------------
    msigs(CT, X*, t, public void m(p*) mbody meth*) = m:s*->void :: msig*

  MS-NoOverrideVoid:
    mlookup(CT, t, m) = undef
    msigs(CT, X*, t, meth*) = msig*
    mtype(m, msig*) = undef
    normPrimParams(CT, X*, p*) = s*
    ---------------------------------------------------------------------
    msigs(CT, X*, t, public void m(p*) mbody meth*) = m:s*->void :: msig*

  // Method type lookup in method signatures (MT: method type)
  MT-Empty:
    --------------------
    mtype(m, []) = undef

  MT-Next:
    (m0 =/=ID m) (mtype(m, msig*) = mlres)
    --------------------------------------
    mtype(m, m0:mt :: msig*) = mlres

  MT-Found:
    ----------------------------
    mtype(m, m:mt :: msig*) = mt

  // Method lookup in class table (ML: method lookup)
  ML-Object:
    -------------------------------
    mlookup(CT, Object, m) = undef

  ML-Found:
    CT.q = {s*, msig*, s, X*}
    mtype(m, msig*) = mt
    mt[X* |-> t*](mt) = mt1
    --------------------------
    mlookup(CT, q t*, m) = mt1

  ML-Next:
    CT.q = {s*, msig*, s, X*}
    mtype(m, msig*) = undef
    [X* |-> t*](s) = s1
    mlookup(CT, s1, m) = mlres
    ----------------------------
    mlookup(CT, q t*, m) = mlres

  // Type normalisation
  // Parameters (NPP: normalise primitives parameters)
  NPP-Empty:
    -----------------------------
    normPrimParams(CT, X*, ) = []

  NPP-NonEmpty:
    (normPrim(CT, X*, T) = t) (normPrimParamsTail(CT, X*, p') = t*)
    ---------------------------------------------------------------
    normPrimParams(CT, X*, T x p') = t :: t*

  NPP-EmptyTail:
    ---------------------------------
    normPrimParamsTail(CT, X*, ) = []

  NPP-NonEmptyTail:
    (normPrim(CT, X*, T) = t) (normPrimParamsTail(CT, X*, p') = t*)
    ---------------------------------------------------------------
    normPrimParamsTail(CT, X*, , T x p') = t :: t*

  // Superclasses (NSC: normalise super class)
  NSC-Mon:
    norm(CT, X*, c) = t
    -----------------------------
    normSuperClass(CT, X*, c) = t

  NSC-Gen:
    norm(CT, X*, c<T+>) = t
    ---------------------------------
    normSuperClass(CT, X*, c<T+>) = t

  // Classes and type variables (NC: normalise class)
  NC-TypeVar:
    X in X*
    -------------------
    norm(CT, X*, X) = X

  NC-MonClass:
    (c notin X*) (qualify(CT, c) = q)
    ---------------------------------
    norm(CT, X*, c) = q []

  NC-GenClass:
    qualify(CT, c) = q
    CT(c) = {s*, msig*, s, Y*}
    normList(CT, X*, T+) = t*
    |Y*| = |t*|
    --------------------------
    norm(CT, X*, c<T+>) = q t*

  // List of classes and type variables (NLC: norm list class)
  NLC-Last:
    norm(CT, X*, T) = t
    -----------------------------
    normList(CT, X*, T) = t :: []

  NLC-Cons:
    (norm(CT, X*, T) = t) (normList(CT, X*, T+) = t*)
    -------------------------------------------------
    normList(CT, X*, T, T+) = t :: t*

  // Types (NT: normalise types)
  NT-Int:
    ---------------------------
    normPrim(CT, X*, int) = int

  NT-Boolean:
    -----------------------------------
    normPrim(CT, X*, boolean) = boolean

  NT-Identifier:
    norm(CT, X*, X) = t
    -----------------------
    normPrim(CT, X*, X) = t

  NT-GenClass:
    norm(CT, X*, c<T+>) = t
    ---------------------------
    normPrim(CT, X*, c<T+>) = t

  // Class table handling
  // Add import to class table (CTI: class table import)
  CTI-Imports:
    ----------------------------
    I* + c |-> q = c |-> q :: I*

  CTI-ImportsClass:
    ------------------------------------------------------------
    I*, c0 |-> q0 : ct + c |-> q = c |-> q :: I*, c0 |-> q0 : ct

  // Add current class to class table (CTC: class table class)
  CTC-Imports:
    ------------------------------------
    I* + c |-> q : ct = I*, c |-> q : ct

  // Check that class name is not in class table (CTD: class table domain)
  CTD-Empty:
    ---------------
    c notin dom([])

  CTD-ImportsClass:
    (c =/=ID c0) (c notin dom(I*))
    -------------------------------
    c notin dom(I*, c0 |-> q0 : ct)

  CTD-Imports:
    (c =/=ID c0) (c notin dom(I*))
    ------------------------------
    c notin dom(c0 |-> q0 :: I*)

  // Unqualified lookup (CTL: class table lookup)
  CTL-ImportFound:
    ct = interface(q)
    -------------------
    c|->q :: I*(c) = ct

  CTL-ImportNext:
    (c0 =/=ID c) (I*(c) = ct)
    -------------------------
    c0|->q0 :: I*(c) = ct

  CTL-ClassFound:
    -------------------
    I*,c|->q:ct(c) = ct

  CTL-ClassNext:
    (c0 =/=ID c) (I*(c) = ct)
    -------------------------
    I*,c0|->q0:ct0(c) = ct

  // Qualified lookup (CTLQ: class table lookup qualified)
  CTLQ-ImportFound:
    ct = interface(q)
    --------------------
    c|->q :: I* . q = ct

  CTLQ-ImportNext:
    (~q0 =/=QID ~q) (I*.~q = ct)
    ----------------------------
    c0|->~q0 :: I* . ~q = ct

  CTLQ-ClassFound:
    --------------------
    I*,c|->q:ct . q = ct

  CTLQ-ClassNext:
    (~q0 =/=QID ~q) (I*.~q = ct)
    ----------------------------
    I*,c0|->~q0:ct0 . ~q = ct

  // Qualify class name (CTQ: class table qualify)
  CTQ-ImportFound:
    ---------------------------
    qualify(c|->q :: I*, c) = q

  CTQ-ImportNext:
    (c0 =/=ID c) (qualify(I*, c) = q)
    ---------------------------------
    qualify(c0|->q0 :: I*, c) = q

  CTQ-ClassFound:
    ----------------------------
    qualify(I*, c|->q:ct, c) = q

  CTQ-ClassNext:
    (c0 =/=ID c) (qualify(I*, c) = q)
    ---------------------------------
    qualify(I*, c0|->q0:ct, c) = q

  // Get type variables from current class (CTV: class table variables)
  CTV-TypeVars:
    -----------------------------------------------
    typevars(I*, c |-> q : {t*, msig*, t, X*}) = X*

  // Get the abstract type of the current class (CTC: class table class)
  CTC-Class:
    typevarsAsTypes(X*) = s*
    ---------------------------------------------
    class(I*, c |-> q : {t*, msig*, t, X*}) = q s*

  // Type variables
  // Disjointness (TVD: type variables disjoint)
  TVD-Last:
    ---------------------
    disjoint(X) = X :: []

  TVD-Cons:
    (X notin X*) (disjoint(X+) = X*)
    --------------------------------
    disjoint(X, X+) = X :: X*

  // Type variable in list (TVI: type variable inclusion)
  TVI-Found:
    ------------
    X in X :: X*

  TVI-Next:
    (X =/=ID Y) (X in X*)
    ---------------------
    X in Y :: X*

  // Type variable not in list (TVE: type variable exclusion)
  TVE-Empty:
    ----------
    X notin []

  TVE-Next:
    (X =/=ID Y) (X notin X*)
    ------------------------
    X notin Y :: X*

  // Length comparison (TVL: type variables length)
  TVL-Empty:
    -----------
    |[]| = |[]|

  TVL-NotEmpty:
    |X*| = |t*|
    -----------------
    |X::X*| = |t::t*|

  // Type variables as abstract types (TVT: type variables types)
  TVT-Empty:
    ------------------------
    typevarsAsTypes([]) = []

  TVT-NonEmpty:
    typevarsAsTypes(X*) = t*
    ------------------------------
    typevarsAsTypes(X::X*) = X::t*

  // Substitution
  // Abstract types (ST: substitution type)
  ST-Int:
    ----------------------
    [X* |-> t*](int) = int

  ST-Boolean:
    ------------------------------
    [X* |-> t*](boolean) = boolean

  ST-Object:
    ----------------------------
    [X* |-> t*](Object) = Object

  ST-Class:
    [X* |-> t*](s*) = s1*
    -------------------------
    [X* |-> t*](q s*) = q s1*

  ST-Var:
    replace(X*, t*, X) = s
    -----------------------
    [X* |-> t*](X) = s

  // List of abstract types (SLT: substitution list types)
  ST-Empty:
    --------------------
    [X* |-> t*]([]) = []

  ST-NonEmpty:
    ([X* |-> t*](s) = s1) ([X* |-> t*](s*) = s1*)
    ---------------------------------------------
    [X* |-> t*](s :: s*) = s1 :: s1*

  // Replace a variable (SV: substitution variable)
  SV-Found:
    ----------------------------
    replace(X::X*, t::t*, X) = t

  SV-Empty:
    ----------------------
    replace([], [], X) = X

  SV-Next:
    (X =/=ID Y) (replace(X*, t*, Y) = s)
    ------------------------------------
    replace(X::X*, t::t*, Y) = s

  // Method types (SM: substitution method)
  SM-MethType:
    ([X* |-> t*](s*) = s1*) ([X* |-> t*](s) = s1)
    ---------------------------------------------
    mt[X* |-> t*](s* -> s) = s1* -> s1

  SM-MethTypeVoid:
    [X* |-> t*](s*) = s1*
    ---------------------------------------
    mt[X* |-> t*](s* -> void) = s1* -> void

  // Class body (CB: class body)
  CB-Implicit:
    fieldenv(CT, fld*) = Ef
    CT; Ef |- meth* OK
    -----------------------
    CT |- { fld* meth* } OK

  CB-Explicit:
    fieldenv(CT, fld*) = Ef
    CT; Ef |- con OK
    CT; Ef |- meth* OK
    ---------------------------
    CT |- { fld* con meth* } OK

  // Check constructor
  CON-Check:
    localenv(CT, p*) = El
    CT; Ef; El |- conbody OK
    ----------------------------------
    CT; Ef |- public k (p*) conbody OK

  CONB-Super:
    class(CT) = q t*
    CT.q = {s*, msig*, q0 s0*, X*}
    CT.q1 = {s1*, msig1*, s1, X1*}
    CT; Ef; El |- e* : t1*
    CT |- t1* <: s1*
    CT; Ef; El |- asgn* OK
    -------------------------------------
    CT; Ef; El |- { super(e*); asgn* } OK

  CONB-NoSuper:
    CT; Ef; El |- asgn* OK
    --------------------------
    CT; Ef; El |- { asgn* } OK

  CONA-Empty:
    ----------------
    CT; Ef; El |- OK

  CONA-Var:
    x:t in Ef;El
    CT; Ef; El |- e : s
    CT |- s <: t
    CT; Ef; El |- asgn* OK
    -----------------------------
    CT; Ef; El |- x = e; asgn* OK

  CONA-This:
    x:t in Ef
    CT; Ef; El |- e : s
    CT |- s <: t
    CT; Ef; El |- asgn* OK
    ----------------------------------
    CT; Ef; El |- this.x = e; asgn* OK

  // Check methods (M: methods)
  M-Empty:
    ------------
    CT; Ef |- OK

  M-Void:
    localenv(CT, p*) = El
    CT; Ef; El |- stm* ~ void
    CT; Ef |- meth* OK
    ---------------------------------------------
    CT; Ef |- public void m(p*) { stm* } meth* OK

  M-Type:
    localenv(CT, p*) = El
    typevars(CT) = X*
    normPrim(CT, X*, T) = t
    CT; Ef; El |- stm* ~ s
    CT |- s <: t
    CT; Ef |- meth* OK
    ------------------------------------------
    CT; Ef |- public T m(p*) { stm* } meth* OK

  // Statements
  S-Empty:
    --------------------
    CT; Ef; El |- ~ void

  S-Return:
    CT; Ef; El |- e : t
    ---------------------------
    CT; Ef; El |- return e; ~ t

  S-VarDecl:
    x notin dom(El)
    typevars(CT) = X*
    normPrim(CT, X*, T) = t
    CT; Ef; El,x:t |- stm* ~ rt
    ----------------------------
    CT; Ef; El |- T x; stm* ~ rt

  S-VarDeclAssign:
    x notin dom(El)
    typevars(CT) = X*
    normPrim(CT, X*, T) = t
    CT; Ef; El |- e : s
    CT |- s <: t
    CT; Ef; El,x:t |- stm* ~ rt
    --------------------------------
    CT; Ef; El |- T x = e; stm* ~ rt

  S-Assign:
    x:t in Ef;El
    CT; Ef; El |- e : s
    CT |- s <: t
    CT; Ef; El |- stm* ~ rt
    ------------------------------
    CT; Ef; El |- x = e; stm* ~ rt

  S-AssignThis:
    x:t in Ef
    CT; Ef; El |- e : s
    CT |- s <: t
    CT; Ef; El |- stm* ~ rt
    -----------------------------------
    CT; Ef; El |- this.x = e; stm* ~ rt

  S-Call:
    class(CT) = s
    mlookup(CT, s, m) = t1* -> rt1
    CT; Ef; El |- e* : s*
    CT |- s* <: t1*
    CT; Ef; El |- stm* ~ rt
    ------------------------------
    CT; Ef; El |- m(e*); stm* ~ rt

  S-CallObj:
    CT; Ef; El |- e : q t*
    mlookup(CT, q t*, m) = t1* -> rt1
    CT; Ef; El |- e* : s*
    CT |- s* <: t1*
    CT; Ef; El |- stm* ~ rt
    ---------------------------------
    CT; Ef; El |- e.m(e*); stm* ~ rt

  S-While:
    CT; Ef; El |- e : boolean
    CT; Ef; El |- stm ~ void
    CT; Ef; El |- stm* ~ rt
    ------------------------------------
    CT; Ef; El |- while(e) stm stm* ~ rt

  S-If:
    CT; Ef; El |- e : boolean
    CT; Ef; El |- stm ~ void
    CT; Ef; El |- stm* ~ rt
    ---------------------------------
    CT; Ef; El |- if(e) stm stm* ~ rtn

  S-IfElse:
    CT; Ef; El |- e : boolean
    CT; Ef; El |- stm1 ~ void
    CT; Ef; El |- stm2 ~ void
    CT; Ef; El |- stm* ~ rt
    --------------------------------------------
    CT; Ef; El |- if(e) stm1 else stm2 stm* ~ rt

  S-Block:
    CT; Ef; El |- stm1* ~ void
    CT; Ef; El |- stm* ~ rt
    ---------------------------------
    CT; Ef; El |- { stm1* } stm* ~ rt

  // Expressions (E: expression)
  E-Int:
    ---------------------
    CT; Ef; El |- n : int

  E-True:
    ----------------------------
    CT; Ef; El |- true : boolean

  E-False:
    -----------------------------
    CT; Ef; El |- false : boolean

  E-NullClass:
    -------------------------
    CT; Ef; El |- null : q t*

  E-NullVar:
    ----------------------
    CT; Ef; El |- null : X

  E-Var:
    x:t in Ef;El
    -------------------
    CT; Ef; El |- x : t

  E-Field:
    x:t in Ef
    ------------------------
    CT; Ef; El |- this.x : t

  E-This:
    class(CT) = t
    ----------------------
    CT; Ef; El |- this : t

  E-Call:
    class(CT) = s
    mlookup(CT, s, m) = t* -> t
    CT; Ef; El |- e* : s*
    CT |- s* <: t*
    ---------------------------
    CT; Ef; El |- m(e*) : t

  E-CallObj:
    CT; Ef; El |- e : s
    mlookup(CT, s, m) = t* -> t
    CT; Ef; El |- e* : s*
    CT |- s* <: t*
    ---------------------------
    CT; Ef; El |- e.m(e*) : t

  E-NewMon:
    qualify(CT, k) = q
    CT.q = {s*, msig*, s, []}
    CT; Ef; El |- e* : t*
    CT |- t* <: s*
    ------------------------------
    CT; Ef; El |- new k(e*) : q []

  E-NewGen:
    qualify(CT, k) = q
    CT.q = {s*, msig*, s, Y*}
    CT; Ef; El |- e* : t*
    typevars(CT) = X*
    normList(CT, X*, T+) = t1*
    [Y* |-> t1*](s*) = s1*
    CT |- t* <: s1*
    -----------------------------------
    CT; Ef; El |- new k<T+>(e*) : q t1*

  E-ArithOp1:
    (CT; Ef; El |- e1 : int) (CT; Ef; El |- e2 : int)
    -------------------------------------------------
    CT; Ef; El |- e1 aop1 e2 : int

  E-ArithOp2:
    (CT; Ef; El |- e1 : int) (CT; Ef; El |- e2 : int)
    -------------------------------------------------
    CT; Ef; El |- e1 aop2 e2 : int

  E-LogOp1:
    (CT; Ef; El |- e1 : boolean) (CT; Ef; El |- e2 : boolean)
    ---------------------------------------------------------
    CT; Ef; El |- e1 lop1 e2 : boolean

  E-LogOp2:
    (CT; Ef; El |- e1 : boolean) (CT; Ef; El |- e2 : boolean)
    ---------------------------------------------------------
    CT; Ef; El |- e1 lop2 e2 : boolean

  E-CmpOp:
    (CT; Ef; El |- e1 : int) (CT; Ef; El |- e2 : int)
    -------------------------------------------------
    CT; Ef; El |- e1 cop e2 : boolean

  E-EqOp:
    (CT; Ef; El |- e1 : t) (CT; Ef; El |- e2 : t)
    -------------------------------------------------
    CT; Ef; El |- e1 eop e2 : boolean

  E-Neg:
    CT; Ef; El |- e : boolean
    ---------------------------
    CT; Ef; El |- ! e : boolean

  E-Subsumption:
    (CT |- t <: s) (t =/=AType s) (CT; Ef; El |- e : t)
    ---------------------------------------------------
    CT; Ef; El |- e : s

  E-Weak:
    (CT; Ef; El |- e : t) (x notin dom(El))
    ---------------------------------------
    CT; Ef; El,x:s |- e : t

  E-Perm2:
    CT; Ef; El,x1:s1,x2:s2 |- e : t
    -------------------------------
    CT; Ef; El,x2:s2,x1:s1 |- e : t

  // Expression lists (EL: expression list)
  EL-Empty:
    ------------------
    CT; Ef; El |- : []

  EL-NonEmpty:
    (CT; Ef; El |- e : t) (atypesTail(CT, Ef, El, e') = t*)
    -------------------------------------------------------
    CT; Ef; El |- e e' : t :: t*

  // Expressions tail (ELT: expression list tail)
  CLT-Empty:
    -----------------------------
    atypesTail(CT, Ef, El, ) = []

  CLT-NonEmpty:
    (CT; Ef; El |- e : t) (atypesTail(CT, Ef, El, e') = t*)
    -------------------------------------------------------
    atypesTail(CT, Ef, El, , e e') = t :: t*

  // Environments
  // Check that variable is not bound (ED: environmemnt domain)
  ED-Empty:
    ----------------
    x notin dom((/))

  ED-Next:
    (x =/=ID y) (x notin dom(E))
    ----------------------------
    x notin dom(E,y:t)

  // Field environments
  // Build field environment (FE: field environment)
  FE-Empty:
    --------------------
    fieldenv(CT, ) = (/)

  FE-NotEmpty:
    fieldenv(CT, fld*) = Ef
    x notin dom(Ef)
    typevars(CT) = X*
    normPrim(CT, X*, T) = t
    ----------------------------------------
    fieldenv(CT, private T x; fld*) = Ef,x:t

  // Loval environments
  // Build local environment (LE: local environment)
  LE-Empty:
    --------------------
    localenv(CT, ) = (/)

  LE-NotEmpty:
    localenvTail(CT, p') = El
    x notin dom(El)
    typevars(CT) = X*
    normPrim(CT, X*, T) = t
    -----------------------------
    localenv(CT, T x p') = El,x:t

  // Local environment from parameters tail (LET: local environment tail)
  LET-Empty:
    ------------------------
    localenvTail(CT, ) = (/)

  LET-NotEmpty:
    localenvTail(CT, p') = El
    x notin dom(El)
    typevars(CT) = X*
    normPrim(CT, X*, T) = t
    -----------------------------------
    localenvTail(CT, , T x p') = El,x:t

  // Lookup in local and field environment (LLF: lookup local field)
  LLF-FoundLocal:
    -------------------
    x : t in Ef; El,x:t

  LLF-NextLocal:
    (x =/=ID y) (x : t in Ef; El)
    -----------------------------
    x : t in Ef; El,y:s

  LLF-FoundField:
    --------------------
    x : t in Ef,x:t; (/)

  LLF-NextField:
    (x =/=ID y) (x : t in Ef; (/))
    ------------------------------
    x : t in Ef,y:s; (/)

  // Lookup in local environment (LL: lookup local)
  LL-FoundLocal:
    ---------------
    x : t in El,x:t

  LL-NextLocal:
    (x =/=ID y) (x : t in El)
    -------------------------
    x : t in El,y:s

  // Subtyping (SUB: subtyping)
  SUB-Refl:
    ------------
    CT |- t <: t

  SUB-Object:
    --------------------
    CT |- q t* <: Object

  SUB-SuperClass:
    (CT.q1 = {s*, msig*, s, X*}) ([X* |-> t1*](s) = t)
    --------------------------------------------------
    CT |- q1 t1* <: t

  SUB-Trans:
    (CT.q1 = {s*, msig*, s, X*})
    [X* |-> t1*](s) = s1
    t =/=AType s1
    CT |- s1 <: t
    ----------------------------
    CT |- q1 t1* <: t

  // Subtyping of list of types (SUBL: subtyping list)
  SUBL-Empty:
    --------------
    CT |- [] <: []

  SUBL-NonEmpty:
    (CT |- t1 <: t2) (CT |- t1* <: t2*)
    -----------------------------------
    CT |- t1 :: t1* <: t2 :: t2*

// Freshness condition
fresh x : ID in E : Env by x notin dom(E)

// Extension declarations
context-free syntax
  "public" "extension" c:ID "{" -> ExtensionBegin {sx-namespace-suffix(c)}
  "}"                           -> ExtensionEnd

extension begin ExtensionBegin 
extension end ExtensionEnd

interface for tld* is M derived by [] |- tld* => M

// File extensions
base file extension java
extensible file extension xfj
